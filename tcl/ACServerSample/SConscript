# Copyright (c) 2013 - 2014, AllSeen Alliance. All rights reserved.
#
#    Permission to use, copy, modify, and/or distribute this software for any
#    purpose with or without fee is hereby granted, provided that the above
#    copyright notice and this permission notice appear in all copies.
#
#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# sample usage:
# scons ALL=1 TARG=linux WS=off VARIANT=debug 
# scons PRODUCER=1 CONSUMER=1 CONFIG=1 CPS=1 TARG=linux WS=off VARIANT=debug 
# defaults:
# ALL=0
# CONFIG=1
# PRODUCER=0
# CONSUMER=0
# CPS=0

import os

Import('env')

vars = Variables()

sersamp_env = env.Clone()

Export('sersamp_env')

if sersamp_env['VARIANT'] == 'debug':
    sersamp_env.Append(CPPDEFINES = ['ER_DEBUG_AJSVCAPP=1'])
    sersamp_env.Append(CPPDEFINES = ['ER_DEBUG_AJSERVICESHANDLERS=1'])
    sersamp_env.Append(CPPDEFINES = ['ER_DEBUG_AJSVCALL=1'])
    sersamp_env.Append(CPPDEFINES = ['AJ_DEBUG_RESTRICT=AJ_DEBUG_INFO'])

sersamp_env.Append(CPPPATH = [Dir('../')])
sersamp_env.Append(CPPPATH = [Dir('../../AppsCommon/inc')])
sersamp_env.Append(CPPPATH = [Dir('../../AppsCommon/target/' + sersamp_env['TARG'])])
sersamp_env.Append(CPPPATH = [Dir('../../../../notification/tcl/inc')])

main_exe = 'ACServerSample'

objs= []
srcs = ['ACServerSample.c', '../../AppsCommon/src/PropertyStore.c', '../../AppsCommon/src/Services_Handlers.c']

srcs.extend(['../../AppsCommon/src/ConfigSample.c'])
objs.extend(sersamp_env.SConscript('../../../../config/tcl/SConscript', {'config_env': sersamp_env}))
    
srcs.extend(['ACNotificationProducerSample.c'])
objs.extend(SConscript('../../../../notification/tcl/src/NotificationProducer/SConscript', exports = {'notif_env': sersamp_env}))
objs.extend(SConscript('../../../../notification/tcl/src/NotificationCommon/SConscript', exports = {'notif_env': sersamp_env}))

srcs.extend(['ControlPanelGenerated.c', 'ControlPanelProvided.c', 'ControlPanelSample.c'])
objs.extend(SConscript('../../../../controlpanel/tcl/SConscript', {'cps_env': sersamp_env}))

objs.extend(sersamp_env.Object(srcs))

objs.extend(sersamp_env.SConscript('../../../../services_common/tcl/SConscript', {'services_common_env': sersamp_env}))

objs.extend(sersamp_env.SConscript('../../../../../core/about_tcl/tcl/SConscript', {'about_env': sersamp_env}))

prog = sersamp_env.Program(
    target = main_exe,
    source = [
              objs,
              sersamp_env['aj_obj'],
    ]
 )
sersamp_env.Install('../build', prog)
